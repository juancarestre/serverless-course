service: user-crud-sls-app

provider:
  name: aws
  profile: juan
  runtime: nodejs14.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action: 'dynamodb:*'
          Resource: 'arn:aws:dynamodb:us-east-1:597701726802:table/user-crud-sls-app'
        - Effect: Allow
          Action: 's3:*'
          Resource: 'arn:aws:s3:::user-crud-sls-app-bucket-23213213/*'
        - Effect: Allow
          Action: sqs:*
          Resource:
            Fn::GetAtt: [ userEventsQueue, Arn ]
  apiGateway:
    apiKeys:
      - user-crud-sls-app-apikey

plugins:
  - serverless-offline
  - serverless-dynamodb-local

custom:
  dynamodb:
    stages:
      - dev
    start:
      inMemory: true
      migrate: true
      seed: true
    seed:
      users:
        sources:
          table: user-crud-sls-app
          sources: [./users_seed.json]
    migration:
      dir: offline/migrations

package:
  individually: true
  patterns:
    #- ./** #TODO: asi funca en mac, revisar como funciona esto en otros sistemas operativos
    - "!*/**" # asi funciona en mac, funcionara igual en windows?



functions:
  get:
    handler: ./get/handler.getUser
    package:
      patterns:
        - get/handler.js
    events:
      - http:
          path: user/{idx}
          method: GET
          request:
            parameters:
              paths:
                idx: true

  create-user:
    handler: ./create-user/handler.createUser
    package:
      patterns:
        - create-user/handler.js
    events:
      - http:
          path: user
          method: POST
          authorizer:
            name: custom-authorizer
            resultTtlInSeconds: 30

  custom-authorizer:
    handler: authorizer/handler.authorize
    package:
      patterns:
        - authorizer/handler.js

  delete-user:
    handler: delete-user/handler.delete_user
    runtime: python3.8
    package:
      patterns:
        - delete-user/handler.py
    events:
      - http:
          path: user/{idx}
          request:
            parameters:
              paths:
                idx: true
          method: DELETE

  update-user:
    handler: ./update-user/handler.updateUser
    package:
      patterns:
        - update-user/handler.js
    events:
      - http:
          path: user/{idx}
          method: PATCH
          request:
            parameters:
              paths:
                idx: true
            schemas:
              application/json: ${file(api_schemas/update-user-validation.yml)}

  s3-signed-url:
    handler: ./pre-signed-url/handler.preSignedUrl
    package:
      patterns:
        - pre-signed-url/handler.js
    events:
      - http:
          path: signed_url/
          private: true
          method: GET
          request:
            parameters:
              querystrings:
                filename: true

  process-image:
    reservedConcurrency: 1
    handler: ./process-image/handler.processImage
    package:
      patterns:
        - process-image/handler.js
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - userEventsQueue
              - Arn

  # upload-image:
  #   handler: ./upload-image/handler.uploadUser
  #   package:
  #     patterns:
  #       - upload-image/handler.js
  #   events:
  #     - http:
  #         path: upload_image/
  #         private: true
  #         method: POST
  #         request:
  #           parameters:
  #             querystrings:
  #               filename: true


resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: user-crud-sls-app
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    userImagesBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        AccessControl: PublicRead
        BucketName: user-crud-sls-app-bucket-23213213
    userImagesBucketPolicy: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-policy.html
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref userImagesBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action:
                - 's3:GetObject'
              Effect: Allow
              Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref userImagesBucket
                  - /*
              Principal: '*'
    userEventsQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: sqs-queue-${opt:stage, 'dev'}.fifo
        FifoQueue: true